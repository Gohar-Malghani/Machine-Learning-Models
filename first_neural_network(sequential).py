# -*- coding: utf-8 -*-
"""First Neural Network(Sequential)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z7RDLahOz_U4ttbhCGZao2t07R7DXkKn
"""

from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical

(x_train,y_train),(x_test,y_test) = mnist.load_data()

import matplotlib.pyplot as plt
n = 10
plt.figure(figsize=(20,4))
for i in range(n):
  ax = plt.subplot(2,n,i+1)
  plt.imshow(x_train[i].reshape(28,28))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
  plt.show()
  plt.close()

print("Pervious x_train{}\n Pervious y_train{}".format(x_train.shape,y_train.shape))
x_train=x_train.reshape(60000,784)
x_test=x_test.reshape(10000,784)

x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train/=255
x_test/=255

classes=10
y_train = to_categorical(y_train,classes)
y_test = to_categorical(y_test,classes)
print('New x_train{}\n New Y_train{}'.format(x_train.shape,y_train.shape))

input_size = 784
batch_size = 200
hidden_layer1 = 400
hidden_layer2=20
classes=10
epochs = 10

model = Sequential()
model.add(Dense(hidden_layer1,input_dim=input_size, activation= 'relu'))
model.add(Dense(hidden_layer2,activation='relu'))
model.add(Dense(classes,activation='softmax'))
model.compile(loss='categorical_crossentropy',optimizer='sgd')
model.summary()
model.compile(loss='categorical_crossentropy',optimizer='sgd')
model.summary()

from time import time
tic = time()
model.fit(x_train,y_train,batch_size=batch_size,epochs=epochs,verbose=1)
toc = time()
print('Model Took time{}'.format(toc-tic))

from sklearn.metrics import accuracy_score
import numpy as np

pre = model.predict(x_test)
predict = np.argmax(pre,axis=1)
test = np.argmax(y_test,axis=1)
result = accuracy_score(predict,test)
print('Accuracy {}'.format(result))

mask  = range(20)
valied = x_test[0:20]
actucal_data = y_test[0:20]
predict_data = model.predict(valied)
y_predixct = np.argmax(predict_data,axis=1)

n = len(valied)
plt.figure(figsize=(20,4))
for i in range(n):
  ax = plt.subplot(2,n,i+1+n)
  plt.imshow(valied[i].reshape(28,28))
  plt.gray()
  ax.get_xaxis().set_visible(False)
  ax.get_yaxis().set_visible(False)
  plt.show()
  plt.close()

  predict_digit = np.argmax(predict_data[i])
  ax= plt.subplot(2,n,i+1+n)
  plt.text(0.5,0.5,str(predict_digit),fontsize=12,va='center',ha='center')
  plt.axis('off')
  plt.show()
  plt.close()

