# -*- coding: utf-8 -*-
"""Titanicipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UMFACIgdg7-4SVJ34Iy0PvIpfizh-Adi
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

train = pd.read_csv('train.csv')
test = pd.read_csv('test.csv')

train.head()

from sklearn.impute import SimpleImputer

sns.heatmap(train.isnull())

train.dropna(inplace=True)

sns.heatmap(train.isnull())

train.drop(['PassengerId','Name','SibSp','Ticket','Cabin'],axis=1,inplace=True)

x = train.drop('Survived',axis=1)
y = train['Survived']

test_passenger_id = test['PassengerId']

x_test = test.drop('PassengerId',axis=1)

from sklearn.preprocessing import   OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline

x.columns

step1 = ColumnTransformer([
    ('ohe_sex_embarked',OneHotEncoder(sparse_output=False,drop='first',handle_unknown='ignore'),[1,5])
],remainder='passthrough')

step2 = LogisticRegression(max_iter=1000)

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.impute import SimpleImputer

# Define preprocessor for numerical columns (imputation)
numerical_transformer = SimpleImputer(strategy='mean')

# Define preprocessor for categorical columns (one-hot encoding)
categorical_transformer = OneHotEncoder(sparse_output=False, drop='first', handle_unknown='ignore')

# Create a column transformer to apply different transformations to different columns
preprocessor = ColumnTransformer(
    transformers=[
        ('num', numerical_transformer, ['Age', 'Fare']),
        ('cat', categorical_transformer, ['Sex', 'Embarked'])
    ],
    remainder='passthrough' # Keep other columns (like Pclass and Parch) as they are
)

# Create the pipeline
pipe = Pipeline([
    ('preprocessor', preprocessor),
    ('classifier', LogisticRegression(max_iter=1000))
])

pipe.fit(x,y)

prediction = pipe.predict(x_test)

from sklearn.metrics import accuracy_score



# Create a submission DataFrame
submission_df = pd.DataFrame({'PassengerId': test_passenger_id, 'Survived': prediction})

# Display the first few rows of the submission DataFrame
display(submission_df.head())
submission_df.to_csv('submission.csv',index=False)

